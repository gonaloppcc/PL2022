
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "GrammarEMPTY IMPORT NEW_LINE NT TOKENS TWO_POINTS excl expRegex incl literal name path pop push state token tokenStateGrammar : Imports States Tokens NonTerminalListImports : emptyImports : Imports Import\n                   | Imports Import NEW_LINEImport : IMPORT pathStates : state ':' NEW_LINE StatesListStatesList : StatesList State NEW_LINEStatesList : State : name Type Type : inclType : exclTokens : TOKENS TWO_POINTS NEW_LINE ListaTokensTokens : ListaTokens : ListaTokens TokenListaTokens : TokenToken : tokenState expRegex MaybeFunc NEW_LINE Token : token expRegex MaybeFunc NEW_LINE MaybeFunc : pop MaybeFunc : push MaybeFunc : NonTerminalList : NonTerminalList NTerminalNonTerminalList : emptyNTerminal : '-' NT ':' NEW_LINE ProductionsProductions : Production\n                       | Production NEW_LINEProductions : Productions Production\n                       | Productions Production NEW_LINEProduction : Production SimbProduction : SimbSimb : EMPTYSimb : literalSimb : NTSimb : tokenempty : "
    
_lr_action_items = {'state':([0,2,3,5,10,12,],[-34,6,-2,-3,-4,-5,]),'IMPORT':([0,2,3,5,10,12,],[-34,7,-2,-3,-4,-5,]),'$end':([1,4,8,13,14,16,17,20,22,23,29,32,41,42,43,44,45,46,47,48,49,50,51,52,53,],[0,-13,-34,-1,-22,-8,-21,-6,-12,-15,-14,-7,-32,-23,-24,-29,-30,-31,-33,-16,-17,-26,-25,-28,-27,]),'TOKENS':([4,16,20,32,],[9,-8,-6,-7,]),'-':([4,8,13,14,16,17,20,22,23,29,32,41,42,43,44,45,46,47,48,49,50,51,52,53,],[-13,-34,18,-22,-8,-21,-6,-12,-15,-14,-7,-32,-23,-24,-29,-30,-31,-33,-16,-17,-26,-25,-28,-27,]),'NEW_LINE':([5,11,12,15,26,28,30,31,33,34,35,37,38,39,40,41,43,44,45,46,47,50,52,],[10,16,-5,19,32,36,-20,-20,-9,-10,-11,48,-18,-19,49,-32,51,-29,-30,-31,-33,53,-28,]),':':([6,21,],[11,28,]),'path':([7,],[12,]),'TWO_POINTS':([9,],[15,]),'name':([16,20,32,],[-8,27,-7,]),'NT':([18,36,41,42,43,44,45,46,47,50,51,52,53,],[21,41,-32,41,41,-29,-30,-31,-33,41,-25,-28,-27,]),'tokenState':([19,22,23,29,48,49,],[24,24,-15,-14,-16,-17,]),'token':([19,22,23,29,36,41,42,43,44,45,46,47,48,49,50,51,52,53,],[25,25,-15,-14,47,-32,47,47,-29,-30,-31,-33,-16,-17,47,-25,-28,-27,]),'expRegex':([24,25,],[30,31,]),'incl':([27,],[34,]),'excl':([27,],[35,]),'pop':([30,31,],[38,38,]),'push':([30,31,],[39,39,]),'EMPTY':([36,41,42,43,44,45,46,47,50,51,52,53,],[45,-32,45,45,-29,-30,-31,-33,45,-25,-28,-27,]),'literal':([36,41,42,43,44,45,46,47,50,51,52,53,],[46,-32,46,46,-29,-30,-31,-33,46,-25,-28,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Grammar':([0,],[1,]),'Imports':([0,],[2,]),'empty':([0,8,],[3,14,]),'States':([2,],[4,]),'Import':([2,],[5,]),'Tokens':([4,],[8,]),'NonTerminalList':([8,],[13,]),'NTerminal':([13,],[17,]),'StatesList':([16,],[20,]),'ListaTokens':([19,],[22,]),'Token':([19,22,],[23,29,]),'State':([20,],[26,]),'Type':([27,],[33,]),'MaybeFunc':([30,31,],[37,40,]),'Productions':([36,],[42,]),'Production':([36,42,],[43,50,]),'Simb':([36,42,43,50,],[44,44,52,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Grammar","S'",1,None,None,None),
  ('Grammar -> Imports States Tokens NonTerminalList','Grammar',4,'p_Grammar','LL1_sin.py',20),
  ('Imports -> empty','Imports',1,'p_Imports','LL1_sin.py',30),
  ('Imports -> Imports Import','Imports',2,'p_Imports_list','LL1_sin.py',34),
  ('Imports -> Imports Import NEW_LINE','Imports',3,'p_Imports_list','LL1_sin.py',35),
  ('Import -> IMPORT path','Import',2,'p_Import','LL1_sin.py',39),
  ('States -> state : NEW_LINE StatesList','States',4,'p_States','LL1_sin.py',47),
  ('StatesList -> StatesList State NEW_LINE','StatesList',3,'p_StatesList_elems','LL1_sin.py',54),
  ('StatesList -> <empty>','StatesList',0,'p_StatesList_empty','LL1_sin.py',62),
  ('State -> name Type','State',2,'p_State','LL1_sin.py',67),
  ('Type -> incl','Type',1,'p_Type_incl','LL1_sin.py',71),
  ('Type -> excl','Type',1,'p_Type_excl','LL1_sin.py',75),
  ('Tokens -> TOKENS TWO_POINTS NEW_LINE ListaTokens','Tokens',4,'p_Tokens_exist','LL1_sin.py',82),
  ('Tokens -> <empty>','Tokens',0,'p_Tokens_empty','LL1_sin.py',87),
  ('ListaTokens -> ListaTokens Token','ListaTokens',2,'p_ListaTokens_exist','LL1_sin.py',91),
  ('ListaTokens -> Token','ListaTokens',1,'p_ListaTokens_empty','LL1_sin.py',97),
  ('Token -> tokenState expRegex MaybeFunc NEW_LINE','Token',4,'p_Token_State','LL1_sin.py',102),
  ('Token -> token expRegex MaybeFunc NEW_LINE','Token',4,'p_Token_NoState','LL1_sin.py',111),
  ('MaybeFunc -> pop','MaybeFunc',1,'p_MaybeFunc_pop','LL1_sin.py',120),
  ('MaybeFunc -> push','MaybeFunc',1,'p_MaybeFunc_push','LL1_sin.py',124),
  ('MaybeFunc -> <empty>','MaybeFunc',0,'p_MaybeFunc_empty','LL1_sin.py',128),
  ('NonTerminalList -> NonTerminalList NTerminal','NonTerminalList',2,'p_NonTerminalList','LL1_sin.py',135),
  ('NonTerminalList -> empty','NonTerminalList',1,'p_NonTerminal','LL1_sin.py',143),
  ('NTerminal -> - NT : NEW_LINE Productions','NTerminal',5,'p_NTerminal','LL1_sin.py',147),
  ('Productions -> Production','Productions',1,'p_Productions','LL1_sin.py',151),
  ('Productions -> Production NEW_LINE','Productions',2,'p_Productions','LL1_sin.py',152),
  ('Productions -> Productions Production','Productions',2,'p_Productions_list','LL1_sin.py',156),
  ('Productions -> Productions Production NEW_LINE','Productions',3,'p_Productions_list','LL1_sin.py',157),
  ('Production -> Production Simb','Production',2,'p_Production_list','LL1_sin.py',161),
  ('Production -> Simb','Production',1,'p_Production_simb','LL1_sin.py',165),
  ('Simb -> EMPTY','Simb',1,'p_Simb_empty','LL1_sin.py',169),
  ('Simb -> literal','Simb',1,'p_Simb_literal','LL1_sin.py',173),
  ('Simb -> NT','Simb',1,'p_Simb_NT','LL1_sin.py',178),
  ('Simb -> token','Simb',1,'p_Simb_token','LL1_sin.py',182),
  ('empty -> <empty>','empty',0,'p_empty','LL1_sin.py',187),
]
