Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Grammar
Rule 1     Grammar -> TOKENS : NEW_LINE Tokens NonTerminalList
Rule 2     Tokens -> Tokens token NEW_LINE
Rule 3     Tokens -> empty
Rule 4     NonTerminalList -> NonTerminalList NTerminal
Rule 5     NonTerminalList -> NTerminal
Rule 6     NTerminal -> - NT : NEW_LINE Productions NEW_LINE
Rule 7     Productions -> Productions NEW_LINE Production
Rule 8     Productions -> Production
Rule 9     Production -> Production Simb
Rule 10    Production -> Simb
Rule 11    Simb -> EMPTY
Rule 12    Simb -> literal
Rule 13    Simb -> NT
Rule 14    Simb -> token
Rule 15    empty -> <empty>

Terminals, with rules where they appear

-                    : 6
:                    : 1 6
EMPTY                : 11
NEW_LINE             : 1 2 6 6 7
NT                   : 6 13
TOKENS               : 1
error                : 
literal              : 12
token                : 2 14

Nonterminals, with rules where they appear

Grammar              : 0
NTerminal            : 4 5
NonTerminalList      : 1 4
Production           : 7 8 9
Productions          : 6 7
Simb                 : 9 10
Tokens               : 1 2
empty                : 3

Parsing method: LALR

state 0

    (0) S' -> . Grammar
    (1) Grammar -> . TOKENS : NEW_LINE Tokens NonTerminalList

    TOKENS          shift and go to state 2

    Grammar                        shift and go to state 1

state 1

    (0) S' -> Grammar .



state 2

    (1) Grammar -> TOKENS . : NEW_LINE Tokens NonTerminalList

    :               shift and go to state 3


state 3

    (1) Grammar -> TOKENS : . NEW_LINE Tokens NonTerminalList

    NEW_LINE        shift and go to state 4


state 4

    (1) Grammar -> TOKENS : NEW_LINE . Tokens NonTerminalList
    (2) Tokens -> . Tokens token NEW_LINE
    (3) Tokens -> . empty
    (15) empty -> .

    token           reduce using rule 15 (empty -> .)
    -               reduce using rule 15 (empty -> .)

    Tokens                         shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) Grammar -> TOKENS : NEW_LINE Tokens . NonTerminalList
    (2) Tokens -> Tokens . token NEW_LINE
    (4) NonTerminalList -> . NonTerminalList NTerminal
    (5) NonTerminalList -> . NTerminal
    (6) NTerminal -> . - NT : NEW_LINE Productions NEW_LINE

    token           shift and go to state 8
    -               shift and go to state 10

    NonTerminalList                shift and go to state 7
    NTerminal                      shift and go to state 9

state 6

    (3) Tokens -> empty .

    token           reduce using rule 3 (Tokens -> empty .)
    -               reduce using rule 3 (Tokens -> empty .)


state 7

    (1) Grammar -> TOKENS : NEW_LINE Tokens NonTerminalList .
    (4) NonTerminalList -> NonTerminalList . NTerminal
    (6) NTerminal -> . - NT : NEW_LINE Productions NEW_LINE

    $end            reduce using rule 1 (Grammar -> TOKENS : NEW_LINE Tokens NonTerminalList .)
    -               shift and go to state 10

    NTerminal                      shift and go to state 11

state 8

    (2) Tokens -> Tokens token . NEW_LINE

    NEW_LINE        shift and go to state 12


state 9

    (5) NonTerminalList -> NTerminal .

    -               reduce using rule 5 (NonTerminalList -> NTerminal .)
    $end            reduce using rule 5 (NonTerminalList -> NTerminal .)


state 10

    (6) NTerminal -> - . NT : NEW_LINE Productions NEW_LINE

    NT              shift and go to state 13


state 11

    (4) NonTerminalList -> NonTerminalList NTerminal .

    -               reduce using rule 4 (NonTerminalList -> NonTerminalList NTerminal .)
    $end            reduce using rule 4 (NonTerminalList -> NonTerminalList NTerminal .)


state 12

    (2) Tokens -> Tokens token NEW_LINE .

    token           reduce using rule 2 (Tokens -> Tokens token NEW_LINE .)
    -               reduce using rule 2 (Tokens -> Tokens token NEW_LINE .)


state 13

    (6) NTerminal -> - NT . : NEW_LINE Productions NEW_LINE

    :               shift and go to state 14


state 14

    (6) NTerminal -> - NT : . NEW_LINE Productions NEW_LINE

    NEW_LINE        shift and go to state 15


state 15

    (6) NTerminal -> - NT : NEW_LINE . Productions NEW_LINE
    (7) Productions -> . Productions NEW_LINE Production
    (8) Productions -> . Production
    (9) Production -> . Production Simb
    (10) Production -> . Simb
    (11) Simb -> . EMPTY
    (12) Simb -> . literal
    (13) Simb -> . NT
    (14) Simb -> . token

    EMPTY           shift and go to state 20
    literal         shift and go to state 21
    NT              shift and go to state 16
    token           shift and go to state 22

    Productions                    shift and go to state 17
    Production                     shift and go to state 18
    Simb                           shift and go to state 19

state 16

    (13) Simb -> NT .

    EMPTY           reduce using rule 13 (Simb -> NT .)
    literal         reduce using rule 13 (Simb -> NT .)
    NT              reduce using rule 13 (Simb -> NT .)
    token           reduce using rule 13 (Simb -> NT .)
    NEW_LINE        reduce using rule 13 (Simb -> NT .)


state 17

    (6) NTerminal -> - NT : NEW_LINE Productions . NEW_LINE
    (7) Productions -> Productions . NEW_LINE Production

    NEW_LINE        shift and go to state 23


state 18

    (8) Productions -> Production .
    (9) Production -> Production . Simb
    (11) Simb -> . EMPTY
    (12) Simb -> . literal
    (13) Simb -> . NT
    (14) Simb -> . token

    NEW_LINE        reduce using rule 8 (Productions -> Production .)
    EMPTY           shift and go to state 20
    literal         shift and go to state 21
    NT              shift and go to state 16
    token           shift and go to state 22

    Simb                           shift and go to state 24

state 19

    (10) Production -> Simb .

    EMPTY           reduce using rule 10 (Production -> Simb .)
    literal         reduce using rule 10 (Production -> Simb .)
    NT              reduce using rule 10 (Production -> Simb .)
    token           reduce using rule 10 (Production -> Simb .)
    NEW_LINE        reduce using rule 10 (Production -> Simb .)


state 20

    (11) Simb -> EMPTY .

    EMPTY           reduce using rule 11 (Simb -> EMPTY .)
    literal         reduce using rule 11 (Simb -> EMPTY .)
    NT              reduce using rule 11 (Simb -> EMPTY .)
    token           reduce using rule 11 (Simb -> EMPTY .)
    NEW_LINE        reduce using rule 11 (Simb -> EMPTY .)


state 21

    (12) Simb -> literal .

    EMPTY           reduce using rule 12 (Simb -> literal .)
    literal         reduce using rule 12 (Simb -> literal .)
    NT              reduce using rule 12 (Simb -> literal .)
    token           reduce using rule 12 (Simb -> literal .)
    NEW_LINE        reduce using rule 12 (Simb -> literal .)


state 22

    (14) Simb -> token .

    EMPTY           reduce using rule 14 (Simb -> token .)
    literal         reduce using rule 14 (Simb -> token .)
    NT              reduce using rule 14 (Simb -> token .)
    token           reduce using rule 14 (Simb -> token .)
    NEW_LINE        reduce using rule 14 (Simb -> token .)


state 23

    (6) NTerminal -> - NT : NEW_LINE Productions NEW_LINE .
    (7) Productions -> Productions NEW_LINE . Production
    (9) Production -> . Production Simb
    (10) Production -> . Simb
    (11) Simb -> . EMPTY
    (12) Simb -> . literal
    (13) Simb -> . NT
    (14) Simb -> . token

    -               reduce using rule 6 (NTerminal -> - NT : NEW_LINE Productions NEW_LINE .)
    $end            reduce using rule 6 (NTerminal -> - NT : NEW_LINE Productions NEW_LINE .)
    EMPTY           shift and go to state 20
    literal         shift and go to state 21
    NT              shift and go to state 16
    token           shift and go to state 22

    Production                     shift and go to state 25
    Simb                           shift and go to state 19

state 24

    (9) Production -> Production Simb .

    EMPTY           reduce using rule 9 (Production -> Production Simb .)
    literal         reduce using rule 9 (Production -> Production Simb .)
    NT              reduce using rule 9 (Production -> Production Simb .)
    token           reduce using rule 9 (Production -> Production Simb .)
    NEW_LINE        reduce using rule 9 (Production -> Production Simb .)


state 25

    (7) Productions -> Productions NEW_LINE Production .
    (9) Production -> Production . Simb
    (11) Simb -> . EMPTY
    (12) Simb -> . literal
    (13) Simb -> . NT
    (14) Simb -> . token

    NEW_LINE        reduce using rule 7 (Productions -> Productions NEW_LINE Production .)
    EMPTY           shift and go to state 20
    literal         shift and go to state 21
    NT              shift and go to state 16
    token           shift and go to state 22

    Simb                           shift and go to state 24
